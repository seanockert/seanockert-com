/* The default html and body font-size for the base rem value. */
$rem-base: 16px !default;

/* Base padding */
$base-padding: 1.875rem;

$modules: () !default;

/* Mixins ---------------------- */

/* For Block Grid */
@mixin exports($name) {
  $module_index: index($modules, $name);
  @if (($module_index == null) or ($module_index == false)) {
    $modules: append($modules, $name);
    @content;
  }
}

/* Replaces the Bourbon function eg .box { @include vendor-prefix(border-radius, 10px); } */
@mixin vendor-prefix($name, $argument) {
  -webkit-#{$name}: #{$argument};
  -moz-#{$name}: #{$argument};
  #{$name}: #{$argument};
}

/* For creating vertically center aligned elements */
@mixin vertical-align {
  position: relative;
  top: 50%;
}

/* Use .no-list for a blank list - useful for nav */
@mixin blank-list {
  list-style-type: none;
  padding: 0;
  margin: 0;
  overflow: hidden;
  > li {
    display: block;
  }
}

/* Clear floats */
@mixin clearfix() {
  *zoom: 1;
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}
.clear {
  clear: both;
}

/* Set the default box-sizing to be border-box */
@mixin box-sizing($type:border-box) {
  -moz-box-sizing: $type;
  -webkit-box-sizing: $type;
  box-sizing: $type;
}

*,
*:before,
*:after {
  @include box-sizing(border-box);
}

/* Functions ---------------------- */

/* Calculate Breakpoints */
@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

/*  Strip Unit - strips the unit of measure and returns it */
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/* Convert to REM units - used for grid */
@function convert-to-rem($value, $base-value: $rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) {
    $value: 0;
  } // Turn 0rem into 0
  @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append(
      $remValues,
      convert-to-rem(nth($values, $i), $base-value)
    );
  }
  @return $remValues;
}

/* Convert Hex colour to RGBA to add opacity - used for spinner */
@function hex-to-rgba($color, $opacity: 0.5) {
  @return rgba($color, $opacity);
}

/* Media Query Ranges ---------------------- */

$small-range: (0em, 32em) !default;
$medium-range: (40.063em, 64em) !default;
$large-range: (64.063em, 90em) !default;
$xlarge-range: (90.063em, 120em) !default;
$xxlarge-range: (120.063em) !default;

$screen: "only screen" !default;

$landscape: "#{$screen} and (orientation: landscape)" !default;
$portrait: "#{$screen} and (orientation: portrait)" !default;

$small-up: $screen !default;
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})" !default;
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})"
  !default;

$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})"
  !default;

$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})"
  !default;

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})"
  !default;
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})"
  !default;

/* Set a path for all the assets */
$asset-path: "../images";
//$asset-path: '/path/to/cdn/';
